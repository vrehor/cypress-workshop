### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""Represents an action that is not permitted for actor"""
type AuthorizationError {
  code: Int!
  message: String!
}

"""Represents a Board"""
type Board {
  id: Int!
  lists: [BoardList!]
  name: String!
  starred: Boolean!
}

input BoardInput {
  name: String!
}

"""Represents a Board list"""
type BoardList {
  cards: [Card!]
  id: Int!
  name: String!
  order: Int!
  user: UserId
}

input BoardListInput {
  name: String!
  order: Int!
}

input BoardListUpdateInput {
  name: String
  order: Int
}

input BoardUpdateInput {
  name: String
  starred: Boolean
}

"""Represents a Card"""
type Card {
  deadline: DateTime
  description: String
  done: Boolean!
  id: Int!
  name: String!
  order: Int!
  user: UserId
}

input CardInput {
  deadline: DateTime
  description: String
  done: Boolean
  name: String!
  order: Int
}

input CardUpdateInput {
  deadline: DateTime
  description: String
  done: Boolean
  name: String
  order: Int
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Represents a Login data"""
type LoginData {
  token: String
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createBoard(input: BoardInput!): UnionValidationErrorBoard!
  createBoardList(boardId: Int!, input: BoardListInput!): UnionValidationErrorNotFoundErrorBoardList!
  createCard(input: CardInput!, listId: Int!): UnionValidationErrorNotFoundErrorCard!
  deleteBoard(boardId: Int!): UnionNotFoundErrorBoard!
  deleteBoardList(listId: Int!): UnionNotFoundErrorBoardList!
  deleteCard(cardId: Int!): UnionNotFoundErrorCard!
  login(input: LoginInput!): UnionAuthorizationErrorValidationErrorLoginData!
  reset: Boolean!
  signup(input: LoginInput!): UnionValidationErrorLoginData!
  updateBoard(boardId: Int!, input: BoardUpdateInput!): UnionNotFoundErrorBoard!
  updateBoardList(input: BoardListUpdateInput!, listId: Int!): UnionNotFoundErrorBoardList!
  updateCard(cardId: Int!, input: CardUpdateInput!): UnionNotFoundErrorCard!
}

"""Represents a requested resource that doesn't exist"""
type NotFoundError {
  code: Int!
  message: String!
}

type Query {
  board(boardId: Int!): UnionBoardNotFoundError!
  boardLists(boardId: Int!): [BoardList!]
  boards: [Board!]
  cards(listId: Int!): [Card!]
  user: User
  users: [User!]
}

union UnionAuthorizationErrorValidationErrorLoginData = AuthorizationError | LoginData | ValidationError

union UnionBoardNotFoundError = Board | NotFoundError

union UnionNotFoundErrorBoard = Board | NotFoundError

union UnionNotFoundErrorBoardList = BoardList | NotFoundError

union UnionNotFoundErrorCard = Card | NotFoundError

union UnionValidationErrorBoard = Board | ValidationError

union UnionValidationErrorLoginData = LoginData | ValidationError

union UnionValidationErrorNotFoundErrorBoardList = BoardList | NotFoundError | ValidationError

union UnionValidationErrorNotFoundErrorCard = Card | NotFoundError | ValidationError

"""Represents an User"""
type User {
  email: String!
  id: Int!
}

"""Represents an User object with id"""
type UserId {
  id: Int!
}

"""Represents an invocation with unexpected parameter values"""
type ValidationError {
  code: Int!
  fields: [String!]!
  messages: [String!]!
}
