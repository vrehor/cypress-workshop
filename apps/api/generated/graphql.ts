/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Ctx } from "./../src/config/apollo/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSONObject";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSONObject";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BoardInput: { // input type
    name: string; // String!
  }
  BoardListInput: { // input type
    name: string; // String!
    order: number; // Int!
  }
  BoardListUpdateInput: { // input type
    name?: string | null; // String
    order?: number | null; // Int
  }
  BoardUpdateInput: { // input type
    name?: string | null; // String
    starred?: boolean | null; // Boolean
  }
  CardInput: { // input type
    deadline?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    done?: boolean | null; // Boolean
    name: string; // String!
    order?: number | null; // Int
  }
  CardUpdateInput: { // input type
    deadline?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    done?: boolean | null; // Boolean
    name?: string | null; // String
    order?: number | null; // Int
  }
  LoginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
  JSONObject: any
}

export interface NexusGenObjects {
  AuthorizationError: { // root type
    message: string; // String!
  }
  Board: { // root type
    id: number; // Int!
    name: string; // String!
    starred: boolean; // Boolean!
  }
  BoardList: { // root type
    id: number; // Int!
    name: string; // String!
    order: number; // Int!
    user?: NexusGenRootTypes['UserId'] | null; // UserId
  }
  Card: { // root type
    deadline?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    done: boolean; // Boolean!
    id: number; // Int!
    name: string; // String!
    order: number; // Int!
    user?: NexusGenRootTypes['UserId'] | null; // UserId
  }
  LoginData: { // root type
    token?: string | null; // String
  }
  Mutation: {};
  NotFoundError: { // root type
    message: string; // String!
  }
  Query: {};
  User: { // root type
    email: string; // String!
    id: number; // Int!
  }
  UserId: { // root type
    id: number; // Int!
  }
  ValidationError: { // root type
    fields: string[]; // [String!]!
    messages: string[]; // [String!]!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
  UnionAuthorizationErrorValidationErrorLoginData: NexusGenRootTypes['AuthorizationError'] | NexusGenRootTypes['LoginData'] | NexusGenRootTypes['ValidationError'];
  UnionBoardNotFoundError: NexusGenRootTypes['Board'] | NexusGenRootTypes['NotFoundError'];
  UnionNotFoundErrorBoard: NexusGenRootTypes['Board'] | NexusGenRootTypes['NotFoundError'];
  UnionNotFoundErrorBoardList: NexusGenRootTypes['BoardList'] | NexusGenRootTypes['NotFoundError'];
  UnionNotFoundErrorCard: NexusGenRootTypes['Card'] | NexusGenRootTypes['NotFoundError'];
  UnionValidationErrorBoard: NexusGenRootTypes['Board'] | NexusGenRootTypes['ValidationError'];
  UnionValidationErrorLoginData: NexusGenRootTypes['LoginData'] | NexusGenRootTypes['ValidationError'];
  UnionValidationErrorNotFoundErrorBoardList: NexusGenRootTypes['BoardList'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['ValidationError'];
  UnionValidationErrorNotFoundErrorCard: NexusGenRootTypes['Card'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['ValidationError'];
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthorizationError: { // field return type
    code: number; // Int!
    message: string; // String!
  }
  Board: { // field return type
    id: number; // Int!
    lists: NexusGenRootTypes['BoardList'][] | null; // [BoardList!]
    name: string; // String!
    starred: boolean; // Boolean!
  }
  BoardList: { // field return type
    cards: NexusGenRootTypes['Card'][] | null; // [Card!]
    id: number; // Int!
    name: string; // String!
    order: number; // Int!
    user: NexusGenRootTypes['UserId'] | null; // UserId
  }
  Card: { // field return type
    deadline: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    done: boolean; // Boolean!
    id: number; // Int!
    name: string; // String!
    order: number; // Int!
    user: NexusGenRootTypes['UserId'] | null; // UserId
  }
  LoginData: { // field return type
    token: string | null; // String
  }
  Mutation: { // field return type
    createBoard: NexusGenRootTypes['UnionValidationErrorBoard']; // UnionValidationErrorBoard!
    createBoardList: NexusGenRootTypes['UnionValidationErrorNotFoundErrorBoardList']; // UnionValidationErrorNotFoundErrorBoardList!
    createCard: NexusGenRootTypes['UnionValidationErrorNotFoundErrorCard']; // UnionValidationErrorNotFoundErrorCard!
    deleteBoard: NexusGenRootTypes['UnionNotFoundErrorBoard']; // UnionNotFoundErrorBoard!
    deleteBoardList: NexusGenRootTypes['UnionNotFoundErrorBoardList']; // UnionNotFoundErrorBoardList!
    deleteCard: NexusGenRootTypes['UnionNotFoundErrorCard']; // UnionNotFoundErrorCard!
    login: NexusGenRootTypes['UnionAuthorizationErrorValidationErrorLoginData']; // UnionAuthorizationErrorValidationErrorLoginData!
    reset: boolean; // Boolean!
    signup: NexusGenRootTypes['UnionValidationErrorLoginData']; // UnionValidationErrorLoginData!
    updateBoard: NexusGenRootTypes['UnionNotFoundErrorBoard']; // UnionNotFoundErrorBoard!
    updateBoardList: NexusGenRootTypes['UnionNotFoundErrorBoardList']; // UnionNotFoundErrorBoardList!
    updateCard: NexusGenRootTypes['UnionNotFoundErrorCard']; // UnionNotFoundErrorCard!
  }
  NotFoundError: { // field return type
    code: number; // Int!
    message: string; // String!
  }
  Query: { // field return type
    board: NexusGenRootTypes['UnionBoardNotFoundError']; // UnionBoardNotFoundError!
    boardLists: NexusGenRootTypes['BoardList'][] | null; // [BoardList!]
    boards: NexusGenRootTypes['Board'][] | null; // [Board!]
    cards: NexusGenRootTypes['Card'][] | null; // [Card!]
    user: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][] | null; // [User!]
  }
  User: { // field return type
    email: string; // String!
    id: number; // Int!
  }
  UserId: { // field return type
    id: number; // Int!
  }
  ValidationError: { // field return type
    code: number; // Int!
    fields: string[]; // [String!]!
    messages: string[]; // [String!]!
  }
}

export interface NexusGenFieldTypeNames {
  AuthorizationError: { // field return type name
    code: 'Int'
    message: 'String'
  }
  Board: { // field return type name
    id: 'Int'
    lists: 'BoardList'
    name: 'String'
    starred: 'Boolean'
  }
  BoardList: { // field return type name
    cards: 'Card'
    id: 'Int'
    name: 'String'
    order: 'Int'
    user: 'UserId'
  }
  Card: { // field return type name
    deadline: 'DateTime'
    description: 'String'
    done: 'Boolean'
    id: 'Int'
    name: 'String'
    order: 'Int'
    user: 'UserId'
  }
  LoginData: { // field return type name
    token: 'String'
  }
  Mutation: { // field return type name
    createBoard: 'UnionValidationErrorBoard'
    createBoardList: 'UnionValidationErrorNotFoundErrorBoardList'
    createCard: 'UnionValidationErrorNotFoundErrorCard'
    deleteBoard: 'UnionNotFoundErrorBoard'
    deleteBoardList: 'UnionNotFoundErrorBoardList'
    deleteCard: 'UnionNotFoundErrorCard'
    login: 'UnionAuthorizationErrorValidationErrorLoginData'
    reset: 'Boolean'
    signup: 'UnionValidationErrorLoginData'
    updateBoard: 'UnionNotFoundErrorBoard'
    updateBoardList: 'UnionNotFoundErrorBoardList'
    updateCard: 'UnionNotFoundErrorCard'
  }
  NotFoundError: { // field return type name
    code: 'Int'
    message: 'String'
  }
  Query: { // field return type name
    board: 'UnionBoardNotFoundError'
    boardLists: 'BoardList'
    boards: 'Board'
    cards: 'Card'
    user: 'User'
    users: 'User'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
  }
  UserId: { // field return type name
    id: 'Int'
  }
  ValidationError: { // field return type name
    code: 'Int'
    fields: 'String'
    messages: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createBoard: { // args
      input: NexusGenInputs['BoardInput']; // BoardInput!
    }
    createBoardList: { // args
      boardId: number; // Int!
      input: NexusGenInputs['BoardListInput']; // BoardListInput!
    }
    createCard: { // args
      input: NexusGenInputs['CardInput']; // CardInput!
      listId: number; // Int!
    }
    deleteBoard: { // args
      boardId: number; // Int!
    }
    deleteBoardList: { // args
      listId: number; // Int!
    }
    deleteCard: { // args
      cardId: number; // Int!
    }
    login: { // args
      input: NexusGenInputs['LoginInput']; // LoginInput!
    }
    signup: { // args
      input: NexusGenInputs['LoginInput']; // LoginInput!
    }
    updateBoard: { // args
      boardId: number; // Int!
      input: NexusGenInputs['BoardUpdateInput']; // BoardUpdateInput!
    }
    updateBoardList: { // args
      input: NexusGenInputs['BoardListUpdateInput']; // BoardListUpdateInput!
      listId: number; // Int!
    }
    updateCard: { // args
      cardId: number; // Int!
      input: NexusGenInputs['CardUpdateInput']; // CardUpdateInput!
    }
  }
  Query: {
    board: { // args
      boardId: number; // Int!
    }
    boardLists: { // args
      boardId: number; // Int!
    }
    cards: { // args
      listId: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  UnionAuthorizationErrorValidationErrorLoginData: "AuthorizationError" | "LoginData" | "ValidationError"
  UnionBoardNotFoundError: "Board" | "NotFoundError"
  UnionNotFoundErrorBoard: "Board" | "NotFoundError"
  UnionNotFoundErrorBoardList: "BoardList" | "NotFoundError"
  UnionNotFoundErrorCard: "Card" | "NotFoundError"
  UnionValidationErrorBoard: "Board" | "ValidationError"
  UnionValidationErrorLoginData: "LoginData" | "ValidationError"
  UnionValidationErrorNotFoundErrorBoardList: "BoardList" | "NotFoundError" | "ValidationError"
  UnionValidationErrorNotFoundErrorCard: "Card" | "NotFoundError" | "ValidationError"
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "UnionAuthorizationErrorValidationErrorLoginData" | "UnionBoardNotFoundError" | "UnionNotFoundErrorBoard" | "UnionNotFoundErrorBoardList" | "UnionNotFoundErrorCard" | "UnionValidationErrorBoard" | "UnionValidationErrorLoginData" | "UnionValidationErrorNotFoundErrorBoardList" | "UnionValidationErrorNotFoundErrorCard";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Ctx;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}